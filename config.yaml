project:
  name: covert # 项目名称
  binary: test.sh # 可执行文件位置
  script_worker: bash # 脚本解释器
  before_script: |
    echo hello
    echo "{{--address}}"
    echo "{{var.redis.port}}"
    echo "{{redis.port}}"
    exit 0
  # 启动前脚本，可用于前置检查，如果脚本异常退出则视为此次启动失败
  after_script: |
    echo hello
  # 程序退出后脚本，可用于回收数据
  check_health: # 程序健康检查
    script: |
      sleep 2
      exit 1

    # 程序健康检查脚本，如果返回值不为 0 则视为出现问题
    delay: 3 # 开始检测延时
    interval: 2 # 检查间隔
    failures: 3 # 视为失败的错误次数
  check_started: # 程序启动完成检查
    script: |
      echo 启动脚本钩子检测
      exit 0
    # 程序启动检查脚本，如果返回值不为 0 则视为未启动完成
    started_script: |
      echo 启动脚本钩子执行完成
      exit 0
    # 程序启动完成钩子回调
    interval: 0 # 检查间隔
    success: 3 # 视为成功的次数
  signals: # 重启信号量
    reload: 1
    exit: 15
    kill: 9
  restart_policy: ALWAYS
config_alias:
  - key: redis.url
    expr:
      - '{{redis.user}}:{{redis.password}}@{{redis.address}}:{{redis.port}}'
      - '{{redis.user}}:@{{redis.address}}:{{redis.port}}'
      - '{{redis.address}}:{{redis.port}}'
    over: false
args:
  - key: "--address" # 传入参数 key
    expr:
      - 'redis://{{redis.url}}' # 可以用模板变量填充，如果没找到对应的变量，则视为匹配失败
    mode: MERGE # 参数类型
    must: true # 是否为必选
    valid_regex: '^redis://(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.){3}((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))(:[0-9]{1,5})?$' # 参数正则校验
    valid_message: '{{message.key}} 的输入格式错误,正确格式为 redis://IP:端口,而你输入的是 {{message.value}}'
path: # 配置文件路径
  - /etc/config
  - file://{{user.dir}}/examples/test.properties
  - file://{{user.home}}
  - https://www.remote.com
log: # 日志信息
  console: # 控制台日志
    level: TRACE
  file: # 文件日志
    path: /tmp/data.log
    error_path: /tmp/data.log
    level: INFO
    append: false # 日志追加模式
attach: # 内部替换变量
  key: value
  port: 8080
